'use strict';

// Generated by ReScript, PLEASE EDIT WITH CARE

var Fs = require("fs");
var Commander = require("commander");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Compiler2$ReasonablyTyped = require("./compiler2.bs.js");

var UnrecognizedInput = Caml_exceptions.create("Cli-ReasonablyTyped.UnrecognizedInput");

var Args = {};

function inferInputTypeFromFileExtension(filename) {
  if (filename.endsWith(".d.ts")) {
    return /* TypeScriptDefintion */5;
  }
  if (filename.endsWith(".js")) {
    return /* FlowDefinition */1;
  }
  if (filename.endsWith(".css")) {
    return /* CSS */0;
  }
  if (filename.endsWith(".gql")) {
    return /* GraphQL */2;
  }
  if (filename.endsWith(".graphql")) {
    return /* GraphQL */2;
  }
  if (filename.endsWith(".typed.js")) {
    return /* Typed */4;
  }
  if (filename.endsWith(".typed")) {
    return /* Typed */4;
  }
  throw {
        RE_EXN_ID: UnrecognizedInput,
        _1: filename,
        Error: new Error()
      };
}

function guessOutuptFilename(output) {
  switch (output.type_) {
    case /* FlowDefinition */1 :
        var name = output.name;
        if (name.endsWith(".d.ts")) {
          return name.replace(".d.ts", ".js");
        } else if (name.endsWith(".js")) {
          return name;
        } else {
          return name + ".js";
        }
    case /* GraphQL */2 :
        return output.name;
    case /* Reason */3 :
        var name$1 = output.name;
        if (name$1.endsWith(".d.ts")) {
          return name$1.replace(".d.ts", ".re");
        } else if (name$1.endsWith(".js")) {
          return name$1.replace(".js", ".re");
        } else {
          return name$1 + ".re";
        }
    default:
      return output.name;
  }
}

function optionToFileType(input) {
  switch (input) {
    case "css" :
        return /* CSS */0;
    case "dts" :
        return /* TypeScriptDefintion */5;
    case "flow" :
        return /* FlowDefinition */1;
    case "graphql" :
        return /* GraphQL */2;
    case "reason" :
        return /* Reason */3;
    case "typed" :
        return /* Typed */4;
    default:
      throw {
            RE_EXN_ID: UnrecognizedInput,
            _1: input,
            Error: new Error()
          };
  }
}

var program = Commander.version("2.0.0").usage("[options] <file ...>").option("--input [type]", "Input file type").option("--output [type]", "Output file type").option("--debug", "Run in debug mode").parse(process.argv);

var filename = Belt_Option.getExn(Belt_Array.get(program.args, 0));

var inputType = Belt_Option.mapWithDefault(Caml_option.undefined_to_opt(program.input), inferInputTypeFromFileExtension(filename), optionToFileType);

var outputType = Belt_Option.getWithDefault(Belt_Option.map(Caml_option.undefined_to_opt(program.output), optionToFileType), /* Typed */4);

var debug = Belt_Option.getWithDefault(Caml_option.undefined_to_opt(program.debug), false);

var inputSource = Fs.readFileSync(filename, "utf8");

var inputFile = {
  type_: inputType,
  name: filename,
  source: inputSource
};

var outputs = Compiler2$ReasonablyTyped.compile(inputFile, outputType);

Belt_Array.forEach(outputs, (function (output) {
        if (debug) {
          console.log(output.source);
          return ;
        }
        var outputFilename = guessOutuptFilename(output);
        Fs.writeFileSync(outputFilename, output.source, "utf8");
        
      }));

exports.UnrecognizedInput = UnrecognizedInput;
exports.Args = Args;
exports.inferInputTypeFromFileExtension = inferInputTypeFromFileExtension;
exports.guessOutuptFilename = guessOutuptFilename;
exports.optionToFileType = optionToFileType;
exports.program = program;
exports.filename = filename;
exports.inputType = inputType;
exports.outputType = outputType;
exports.debug = debug;
exports.inputSource = inputSource;
exports.inputFile = inputFile;
exports.outputs = outputs;
/* program Not a pure module */
