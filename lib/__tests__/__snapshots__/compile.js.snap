// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compile ReactNamePicker.re 1`] = `
"type myProps = {
  .
  \\"width\\": float,
  \\"height\\": float
};

[@bs.module] external reactNamePicker : ReasonReact.reactClass = \\"ReactNamePicker.react\\";

let make = (~width, ~height, children) => {
  let props: myProps = {\\"width\\": width, \\"height\\": height};
  ReasonReact.wrapJsForReason(~reactClass=reactNamePicker, ~props, children);
};
"
`;

exports[`Compile ReactNamePickerInlinedProps.re 1`] = `
"[@bs.module]
external reactNamePickerInlinedProps : ReasonReact.reactClass =
  \\"ReactNamePickerInlinedProps.react\\";

let make = (~width, ~height, children) => {
  let props: {
    .
    \\"width\\": float,
    \\"height\\": float
  } = {\\"width\\": width, \\"height\\": height};
  ReasonReact.wrapJsForReason(~reactClass=reactNamePickerInlinedProps, ~props, children);
};
"
`;

exports[`Compile component.re 1`] = `
"type props = {
  .
  \\"input\\": Js.Nullable.t(string),
  \\"b\\": Js.Nullable.t(Js.boolean),
};

module ReactComponent = {
  [@bs.module \\"react-component\\"]
  external reactComponent: ReasonReact.reactClass = \\"ReactComponent\\";
  let make = (~input=?, ~b=?, children) => {
    let props: props = {
      \\"input\\": Js.Nullable.from_opt(input),
      \\"b\\":
        Js.Nullable.bind(Js.Nullable.from_opt(b), (. x) =>
          Js.Boolean.to_js_boolean(x)
        ),
    };
    ReasonReact.wrapJsForReason(~reactClass=reactComponent, ~props, children);
  };
};
"
`;

exports[`Compile duplicate-type.re 1`] = `
"[@bs.module \\"duplicate-type\\"]
external add : (~x: [@bs.unwrap] [ | \`Number(float) | \`String(string)]) => float = \\"\\";

[@bs.module \\"duplicate-type\\"]
external sub : (~x: [@bs.unwrap] [ | \`Number(float) | \`String(string)]) => float = \\"\\";
"
`;

exports[`Compile duplicate-type-param.re 1`] = `
"[@bs.module \\"duplicate-type-param\\"]
external add :
  (
    ~x: [@bs.unwrap] [ | \`Number(float) | \`String(string)],
    ~y: [@bs.unwrap] [ | \`Number(float) | \`String(string)]
  ) =>
  float =
  \\"\\";
"
`;

exports[`Compile generics.re 1`] = `
"type thing('x) = {. \\"lst\\": array('x)};

module Adder = {
  type t('x) = {. \\"add\\": [@bs.meth] ('x => 'x)};
  [@bs.new] [@bs.module \\"generics\\"] external make : 'x => t('x) = \\"Adder\\";
};

type subOpts('m, 'n) = {
  .
  \\"m\\": 'm,
  \\"n\\": Adder.t('n)
};
"
`;

exports[`Compile interface.re 1`] = `
"type options = {. \\"op\\": string};

[@bs.module \\"interface\\"]
external apply : (~x: float, ~y: float, ~options: options=?, unit) => float = \\"\\";
"
`;

exports[`Compile literal-type.re 1`] = `
"[@bs.module \\"literal-type\\"] external f : (~x: [@bs.string] [ | \`a | \`b]) => unit = \\"\\";
"
`;

exports[`Compile multiple-modules.re 1`] = `
"[@bs.module \\"multiple-modules\\"] external someTopLevel : unit => unit = \\"\\";

module First = {
  [@bs.module \\"multiple-modules/first\\"] external first : unit => float = \\"\\";
  [@bs.module \\"multiple-modules/first\\"] external second : unit => unit = \\"\\";
};

module Second = {
  [@bs.module \\"multiple-modules/second\\"] external second : unit => string = \\"\\";
  [@bs.module \\"multiple-modules/second\\"] external third : unit => unit = \\"\\";
};

module Third = {
  [@bs.module \\"multiple-modules/third\\"] external third : unit => string = \\"\\";
  [@bs.module \\"multiple-modules/third\\"] external fourth : unit => unit = \\"\\";
};

module ThirdInner = {
  [@bs.module \\"multiple-modules/third/inner\\"] external third : unit => string = \\"\\";
  [@bs.module \\"multiple-modules/third/inner\\"] external fourth : unit => unit = \\"\\";
};
"
`;

exports[`Compile numbers.re 1`] = `
"[@bs.module \\"numbers\\"] external xfg : float = \\"\\";

[@bs.module \\"numbers\\"] external add : (~a: float, ~b: float) => float = \\"\\";
"
`;

exports[`Compile object-type.re 1`] = `
"type subscribeOptions = {
  .
  \\"start\\": float,
  \\"stop\\": float
};

type testOptions = {
  .
  \\"method\\": string,
  \\"subscribe\\": subscribeOptions
};

[@bs.module \\"object-type\\"] external test : (~options: testOptions) => string = \\"\\";
"
`;

exports[`Compile optional-param.re 1`] = `
"[@bs.module \\"optional\\"] external add : (~x: float, ~y: float=?, unit) => float = \\"\\";
"
`;

exports[`Compile promise.re 1`] = `
"[@bs.module \\"promise\\"] external pOfString : unit => Js_promise.t(string) = \\"\\";

[@bs.module \\"promise\\"] external pOfNumber : unit => Js_promise.t(float) = \\"\\";

[@bs.module \\"promise\\"] external pOfArray : unit => Js_promise.t(array(string)) = \\"\\";

[@bs.module \\"promise\\"] external pOfVoid : unit => Js_promise.t(unit) = \\"\\";

[@bs.module \\"promise\\"] external argPromise : (~p: Js_promise.t(string)) => unit = \\"\\";

[@bs.module \\"promise\\"] external listOfPromises : unit => array(Js_promise.t(string)) = \\"\\";

[@bs.module \\"promise\\"] external somePromise : Js_promise.t(array(float)) = \\"\\";
"
`;

exports[`Compile simple.re 1`] = `
"[@bs.module \\"simple\\"] external add : (~x: float, ~y: float) => float = \\"\\";
"
`;

exports[`Compile simple.re 2`] = `
"[@bs.module \\"simple\\"] external add : (~x: float, ~y: float) => float = \\"\\";
"
`;

exports[`Compile simple-class.re 1`] = `
"module Test = {
  type t = {. \\"action\\": 't 's. [@bs.meth] (float => string)};
  [@bs.new] [@bs.module \\"simple-class\\"] external make: string => t = \\"Test\\";
};
"
`;

exports[`Compile spread-args.re 1`] = `
"[@bs.module \\"spread-args\\"] [@bs.splice] external foo : (~bars: array(float)) => unit = \\"\\";

[@bs.module \\"spread-args\\"] [@bs.splice] external optFoo : (~bars: array(float)) => unit = \\"\\";

[@bs.module \\"spread-args\\"] [@bs.splice]
external bothFoo : (~anArg: string, ~bars: array(float)) => unit = \\"\\";

[@bs.module \\"spread-args\\"] [@bs.splice]
external bothOptFoo : (~anArg: string, ~bars: array(float)) => unit = \\"\\";

[@bs.module \\"spread-args\\"] [@bs.splice]
external soManyOpts : (~anArg: string=?, unit, ~bars: array(float)) => unit = \\"\\";

[@bs.module \\"spread-args\\"] [@bs.splice]
external returns : (~anArg: string, ~bars: array(float)) => float = \\"\\";

[@bs.module \\"spread-args\\"] [@bs.splice]
external multipleLists : (~foos: array(float), ~bars: array(float)) => unit = \\"\\";
"
`;

exports[`Compile type-decl.re 1`] = `
"type stringOptions = {. \\"value\\": string};

[@bs.module \\"type-decl\\"] external test : (~s: string, ~options: stringOptions) => string = \\"\\";
"
`;

exports[`Compile union-type.re 1`] = `
"[@bs.module \\"union-type\\"]
external double : (~x: [@bs.unwrap] [ | \`Number(float) | \`String(string)]) => float = \\"\\";
"
`;

exports[`Compile void-func.re 1`] = `
"[@bs.module \\"void-func\\"] external voidFunc : unit => unit = \\"\\";
"
`;
